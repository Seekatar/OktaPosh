name: CI

env:
  OKTA_BASE_URI: https://dev-671484-admin.okta.com
  OKTA_API_TOKEN: ${{ secrets.OKTA_API_TOKEN }}

on:
  push:
    branches:
    - main
    - releases/**
  pull_request:
    branches:
    - releases/**
    - main
  # workflow_dispatch: allows manually kicking off a build
  workflow_dispatch:

defaults:
  run:
    shell: pwsh

jobs:
  CI-Core:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
      max-parallel: 3
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Dump Environment
      shell: pwsh
      run: |
       $PSVersionTable
       gci env: | ft -wrap

    - name: Run Script Analyzer
      shell: pwsh
      working-directory: OktaPosh
      run: |
        if ( -not (Get-Module -Name PSScriptAnalyzer ) ) { Install-Module -Name PSScriptAnalyzer -Scope CurrentUser -Force -Confirm:$false -SkipPublisherCheck }
        $results = Invoke-ScriptAnalyzer -Path . -Recurse
        $results
        if ($results | Where-Object Severity -eq Error ) { Write-Error "Analyzer detected errors." }

    - name: Run Pester Unit Tests
      shell: pwsh
      working-directory: tests/unit
      run: |
        Install-Module Pester -Confirm:$False -Force
        $result = Invoke-Pester -Configuration @{
                                                  Output = @{Verbosity='Detailed'}
                                                  Run = @{PassThru=$true}
                                                  CodeCoverage=@{Enabled=$true;Path='../../OktaPosh/public/*.ps1'}
                                                }
        $result.tests | select name,result
        if ($result.Result -ne "Passed") {
          Write-Error "Pester tests failed"
        }

    - name: Upload to CodeCov
      shell: bash
      working-directory: tests/unit
      run: |
        export CODECOV_TOKEN="${{ secrets.CODECOV }}"
        bash <(curl -s https://codecov.io/bash)
      if: ${{ matrix.os == 'ubuntu-latest'}}

  CI-PS5:
    runs-on: windows-latest
    needs: CI-Core

    steps:
    - uses: actions/checkout@v2

    - name: Run Pester Unit Tests
      shell: powershell
      working-directory: tests/unit
      run: |
        $PSVersionTable
        Install-Module Pester -Confirm:$False -Force
        $result = Invoke-Pester -Configuration @{
                                                  Output = @{Verbosity='Detailed'}
                                                  Run = @{PassThru=$true}
                                                }
        $result.tests | select name,result
        if ($result.Result -ne "Passed") {
          Write-Error "Pester tests failed"
        }

  publish:
    if: startsWith(github.ref, 'refs/heads/releases/')
    runs-on: ubuntu-latest
    needs: [CI-Core,CI-PS5]

    steps:
    - uses: actions/checkout@v2

    - name: Set manifest build version
      uses: seekatar/set-posh-manifest-action@v1.2
      with:
          manifest-path: OktaPosh/OktaPosh.psd1
          commitSHA: ${{ github.sha }}
          githubRef: ${{ github.ref }}

    - name: Generate Help
      shell: pwsh
      working-directory: build
      run: |
        .\New-ModuleHelp.ps1

    - name: Publish Module
      working-directory: OktaPosh
      env:
        PSGalleryKey: ${{ secrets.PSGALLERYKEY }}
      run: |
        gci
        Publish-Module -Path . -NuGetApiKey "$env:PSGalleryKey"
